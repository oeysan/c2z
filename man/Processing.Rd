% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process_data.R
\name{Processing}
\alias{Processing}
\title{Process Data with Optional Parallel Execution and Progress Reporting}
\usage{
Processing(
  func = substitute(NULL),
  n = NULL,
  start.message = NULL,
  end.message = NULL,
  use.multisession = TRUE,
  n.workers = NULL,
  n.chunks = NULL,
  handler = NULL,
  restore.defaults = TRUE,
  silent = FALSE,
  log = list()
)
}
\arguments{
\item{func}{An expression (or a quoted function call) to be evaluated. The default is
\code{substitute(NULL)}. It is evaluated in the parent frame.}

\item{n}{Optional integer indicating the number of items to be processed, used solely for logging purposes.}

\item{start.message}{Optional character string specifying a custom start message. If \code{NULL},
a default message is generated based on the processing type and, if provided, the number of items.}

\item{end.message}{Optional character string specifying a custom end message. If \code{NULL},
a runtime message is generated showing the elapsed time.}

\item{use.multisession}{Logical. If \code{TRUE} (default), parallel processing using multisession
is employed; otherwise, processing is sequential.}

\item{n.workers}{Optional integer for the number of workers to be used in
multisession mode. If \code{NULL}, it defaults to the number of available
cores minus one (with a minimum of one).}

\item{n.chunks}{Optional integer for the number of chunks to process.
If \code{NULL}, it defaults to the number of workers.}

\item{handler}{The progress handler to be used by the \code{progressr} package. If \code{NULL} and
\code{silent} is \code{FALSE}, it defaults to \code{"txtprogressbar"}. When \code{silent} is \code{TRUE},
the handler is set to \code{"void"}.}

\item{restore.defaults}{Logical. If \code{TRUE} (default), the current \code{future} plan is saved and restored upon exit.}

\item{silent}{Logical. If \code{TRUE}, progress output is suppressed. Default is \code{FALSE}.}

\item{log}{A list to collect log messages. Default is an empty list.}
}
\value{
A list with the following components:
\describe{
  \item{result}{The output resulting from the evaluation of \code{func}.}
  \item{log}{A list of log messages including start and end timestamps along with associated messages.}
}
}
\description{
This function executes a provided expression with progress reporting and optional
parallel processing using the \code{future} and \code{progressr} packages. It logs the
start and end times of the process along with a runtime message and supports custom logging,
progress handlers, and execution plans.
}
\details{
The function begins by determining whether to use multisession (parallel) or sequential processing.
It then logs the start time using a helper function, \code{LogCat}, and sets up the \code{future} plan
accordingly. If \code{restore.defaults} is \code{TRUE}, the original plan is restored after execution.

A progress handler is configured via the \code{progressr} package. The provided expression is evaluated
with progress reporting enabled. Upon completion, the function computes the elapsed time (with millisecond
precision) and logs an end message. Finally, it returns a list containing the result of the evaluated expression
and the log of messages.
}
\examples{
\dontrun{
  # Example: Process data with a simple sleep expression using multisession processing
  result <- Processing(
    func = quote({
      Sys.sleep(2)  # simulate a time-consuming task
      "Task Completed"
    }),
    n = 100,
    use.multisession = TRUE
  )
  print(result$result)
  print(result$log)
}

}
